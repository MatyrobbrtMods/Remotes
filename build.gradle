import net.darkhax.curseforgegradle.TaskPublishCurseForge

plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'io.github.groovymc.modsdotgroovy' version '1.1.2'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'org.spongepowered.mixin' version '0.7.+'
    id 'net.darkhax.curseforgegradle' version '1.0.11'
}

group = 'com.matyrobbrt.remotes'
archivesBaseName = 'remotes'
modsDotGroovy.dslVersion = '1.2.2'; modsDotGroovy.platform 'forge'

mixin {
    add sourceSets.main, 'remotes.refmap.json'
    config 'remotes.mixins.json'
    debug.export = true
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: 'parchment', version: '2022.11.27-1.19.2'

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        configureEach {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'remotes'
            mods {
                remotes {
                    source sourceSets.main
                }
            }
        }

        client {}
        server {}
        gameTestServer {}

        data {
            workingDirectory project.file('run')
            args '--mod', 'remotes', '--all',
                    '--output', file('src/generated/resources/'),
                    '--existing', file('src/main/resources/')
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        url 'https://jitpack.io'
    }
}

// jarJar.enable()

dependencies {
    minecraft 'net.minecraftforge:forge:1.19.2-43.1.55'
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

//    We no longer need mixinextras
//    implementation(annotationProcessor("com.github.llamalad7.mixinextras:mixinextras-common:${mixinExtrasVersion}"))
//    implementation(jarJar("com.github.llamalad7.mixinextras:mixinextras-forge:${mixinExtrasVersion}")) {
//        jarJar.ranged(it, "[${mixinExtrasVersion},)")
//    }
}

tasks.register('publishCurseForge', TaskPublishCurseForge).configure {
    it.apiToken = project.findProperty('curseforgeKey')
    it.upload('849348', tasks.jar).tap {
        changelogType = 'markdown'
        changelog = file('changelog.txt').getText()
        releaseType = project.findProperty('releaseType')
        addJavaVersion 'Java 17'
    }
    it.dependsOn(tasks.jarJar)
}

final manifestAttributes = [
        'Specification-Title'   : 'remotes',
        'Specification-Vendor'  : 'Matyrobbrt',
        'Specification-Version' : '1',
        'Implementation-Title'  : project.name,
        'Implementation-Version': project.jar.archiveVersion,
        'Implementation-Vendor' : 'Matyrobbrt',
        'MixinConfigs'          : 'remotes.mixins.json'
]

jar {
    manifest.attributes(manifestAttributes)
    finalizedBy('reobfJar')
    // archiveClassifier.set('slim')
}

tasks.jarJar {
    archiveClassifier.set('')
    finalizedBy('reobfJarJar')
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}
